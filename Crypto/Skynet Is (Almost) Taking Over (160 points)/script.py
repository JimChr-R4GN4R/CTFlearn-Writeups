from Crypto.Util.number import inverse
import gmpy2

n1 = 10603199174122839808738169357706062732533966731323858892743816728206914395320609331466257631096646511986506501272036007668358071304364156150345138983648630874220488837685118753574424686204595981514561343227316297317899
c1 = 5024836662627906750454817701922271080214720765897113783786369197810770999608528443597447448508876214100063962982376037712548944474807897847869334582773452689962992522987755069402952836848501053684233233850594080254869


n2 = 5613358668671613665566510382994441407219432062998832523305840186970780370368271618683122274081615792349154210168307159475914213081021759597948038689876676892007399580995868266543309872185843728429426430822156211839073
c2 = 130884437483098301339042672379318680582507704056215246672305503902799253294397268030727540524911640778691710963573363763216872030631281953772411963153320471648783848323158455504315739311667392161460121273259241311534


n3 = 43197226819995414250880489055413585390503681019180594772781599842207471693041753129885439403306011423063922105541557658194092177558145184151460920732675652134876335722840331008185551706229533179802997366680787866083523
c3 = 40136988332296795741662524458025734893351353026652568277369126873536130787573840288544348201399567767278683800132245661707440297299339161485942455489387697524794283615358478900857853907316854396647838513117062760230880

e = 65537



def ComputeGCD(n1,n2):
    if n2==0:
        return n1
    else:
        return ComputeGCD(n2 , n1 % n2)




p1 = ComputeGCD(n1,n2)
q1 = n1//p1
phi1 = (p1 - 1) * (q1 - 1)
d1 = inverse(e, phi1)
pl1 = gmpy2.root(c1, e)

pl1= pow(c1, d1, n1)
pl1_hex_converted = hex(pl1).split('x')[-1] # convert plaintext to hex
pl1_from_hex_to_ascii = bytearray.fromhex(pl1_hex_converted).decode() # convert hex to ascii
print("plaintext1 = ",pl1_from_hex_to_ascii)


print("\n#####################################################################\n")

p2 = ComputeGCD(n2,n3)
q2 = n2//p2
phi2 = (p2 - 1) * (q2 - 1)
d2 = inverse(e, phi2)

pl2= pow(c2, d2, n2)
pl2_hex_converted = hex(pl2).split('x')[-1] # convert plaintext to hex
pl2_from_hex_to_ascii = bytearray.fromhex(pl2_hex_converted).decode() # convert hex to ascii
print("plaintext2 = ",pl2_from_hex_to_ascii)

print("\n#####################################################################\n")

p3 = ComputeGCD(n1,n3)
q3 = n3//p3
phi3 = (p3 - 1) * (q3 - 1)
d3 = inverse(e, phi3)

pl3= pow(c3, d3, n3)
pl3_hex_converted = hex(pl3).split('x')[-1] # convert plaintext to hex
pl3_from_hex_to_ascii = bytearray.fromhex(pl3_hex_converted).decode() # convert hex to ascii
print("plaintext3 = ",pl3_from_hex_to_ascii)


################# Useful sorces for the script #################
# https://github.com/JimChr-R4GN4R/picoCTF-writeups/blob/master/2019/Cryptography/rsa-pop-quiz%20(200%20points)/p-ct-e-n-_q-_phi-_d_pl.py
# https://github.com/ashutosh1206/Crypton/tree/master/RSA-encryption/Attack-Hastad-Broadcast
